openapi: 3.0.0
info:
  version: 1.0.0
  title: Insolar Explorer API
  contact:
    name: Insolar dev team
    url: 'https://insolar.io/team.html'
    email: dev-support@insolar.io
  description: >
    # Insolar Explorer API documentation


    Welcome to Insolar documentation for a REST-like API provided by Insolar
    Explorer.


    [Insolar Explorer](https://github.com/insolar/block-explorer) is a service
    for searching for and viewing the contents of records, lifelines, jet drops,
    and jets.


    Insolar Explorer provides an API that allows to search for said entities as
    well as request, filter, sort, and paginate their arrays.


    ## Entities description


    Basic Insolar entities that you can find in this specification are the
    following:


    * Record—minimum unit of storage that contains an associated request,
    response, and service information.
      Records can be of three types:
      * Request. Most requests are caused by other requests inside the Plaftorm with the exception of original requests. The latter are invoked by users.
      * Result. Each request has a corresponding execution result.
      * State. Some execution results change object state. They are caused by so-called mutable requests, while immutable requests are simple read operations.
    * Lifeline—sequence of records. A record in a lifeline is an object state
    and an object is a smart contract instance.

    * Jet drop—unit of storage for jets.

    * Jet—group of lifelines.


    Some of the entities have complex identifiers. For example:


    * A jet drop ID is a combination of jet ID and pulse number.

    * A record's index is a combination of pulse number and order.

    * An order is a record number in a jet drop.


    ## Filtering, pagination, sorting


    Some requests have filtering, sorting, and pagination capabilities.


    ### Filtering


    Filtering can be of two types:

    * By an attribute value: filters out from the returned array all the
    entities with attribute values other than specified.

      For example: if you specify `type=request` in a [request](#operation/jet_drop_records) that returns an array of records of different types, the array doesn't contain the `result` and `state` records.

    * By a range of attribute values: filters out from the returned array
    entities with attribute values that are out of the specified range.

      You can specify inclusive, non-inclusive, open-ended, or closed-ended ranges depending on the request.

      All range filter parameters have one of the following suffixes:
      * `*_gt`—greater than
      * `*_lt`—less than
      * `*_gte`—greater than or equal to
      * `*_lte`—less than or equal to

      For example: if you specify `timestamp_gte=1597409219` and `timestamp_lte=1597409241` in a [request](#operation/pulses) that returns an array of pulses, the array doesn't contain pulses older than `51063280` and younger than `51063340`.

    ### Sorting


    The returned array is sorted by an attribute with a monotonically increasing
    value (`pulse_number`, `index`), by default in the descending order. Sorting
    is applied after filtering, if any.


    For example: if you specify `sort_by=index_asc` in a
    [request](#operation/object_lifeline) that returns an array of records, the
    array is sorted in the ascending order of `index`.


    ### Pagination


    Pagination can be applied after filtering and sorting, and uses the
    following 3 parameters:


    * `limit`—number of array items to return.

    * `offset`—number of items to skip.

    * `from_*`—pagination starting point: the value of a monotonically
    increasing attribute. The `*` designates the property name to paginate by.


    For example: if you specify `?limit=100&offset=5&from_index=47382564:2` in a
    [request](#operation/jet_drop_records) that returns an array of records, the
    array:


    * Starts with a record with the 5th index relative to the index
    `47382564:2`.

    * Can consist of 100 entries maximum.


    The number of entries may vary depending on the actual number of records
    requested.

    To show if the value of the `limit` parameter is higher or lower than the
    actual number of entries, each response to a paginated request contains the
    actual existing number in the `total` property.
servers:
  - url: example.com
    description: Test server.
tags:
  - name: Pulse
    description: >-
      Pulse is the trigger for the production of a new jet drop. Pulse also
      serves as the default time unit on Insolar Network.
  - name: Jet drop
    description: >-
      Jet drop is the unit of storage for jets. Jet drop contains all records
      that are registered within a pulse and associated with a particular jet.
  - name: Record
    description: >-
      Record is the minimum unit of storage that contains an associated request,
      response, and service information. Records are grouped by lifeline.
  - name: 'Request, result, and state'
    description: >
      Requests and corresponding results and states.


      Request can either be an original request a user made via the API or a
      subsequent request one object made to another.

      Except the original, requests have a reason, which is a reference to the
      previous one.

      The reason of original request is not pointer but a reference that is
      formed from the pulse data and the request's parameters.


      Execution of all requests causes a corresponding result. Execution of a
      mutable request also causes a new state.

      Each result contains a reference to the corresponding request.
  - name: Search
    description: Searches for an entity on the blockchain.
paths:
  /api/v1/pulses:
    get:
      summary: Pulses
      description: >
        Gets an array of pulses.


        Optionally, specify filtering, sorting, and pagination parameters. For
        more information, refer to the [filtering, pagination,
        sorting](#section/Insolar-Explorer-API-documentation/Filtering-pagination-sorting)
        section.
      operationId: pulses
      tags:
        - Pulse
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/fromPulseNumberParam'
        - $ref: '#/components/parameters/timestamp_gte'
        - $ref: '#/components/parameters/timestamp_lte'
        - $ref: '#/components/parameters/pulse_number_gt'
        - $ref: '#/components/parameters/pulse_number_gte'
        - $ref: '#/components/parameters/pulse_number_lt'
        - $ref: '#/components/parameters/pulse_number_lte'
        - $ref: '#/components/parameters/sort_by_pulse_number'
      responses:
        '200':
          $ref: '#/components/responses/pulsesResponse'
        '400':
          $ref: '#/components/responses/400Response'
        '500':
          $ref: '#/components/responses/500Response'
  '/api/v1/pulses/{pulse_number}':
    get:
      summary: Pulse
      description: Gets pulse by `pulse_number`.
      operationId: pulse
      tags:
        - Pulse
      parameters:
        - $ref: '#/components/parameters/pulse_number_path'
      responses:
        '200':
          $ref: '#/components/responses/pulseResponse'
        '400':
          $ref: '#/components/responses/400Response'
        '404':
          $ref: '#/components/responses/404Response'
        '500':
          $ref: '#/components/responses/500Response'
  '/api/v1/jet-drops/{jet_drop_id}':
    get:
      summary: Jet drop by ID
      description: >-
        Gets the contents of a `jet_drop` given a `jet_drop_id` as a path
        parameter.
      operationId: jetDropByID
      tags:
        - Jet drop
      parameters:
        - $ref: '#/components/parameters/jet_drop_id_path'
      responses:
        '200':
          $ref: '#/components/responses/jetDropResponse'
        '400':
          $ref: '#/components/responses/400Response'
        '404':
          $ref: '#/components/responses/404Response'
        '500':
          $ref: '#/components/responses/500Response'
  '/api/v1/pulses/{pulse_number}/jet-drops':
    get:
      summary: Jet drops by pulse number
      description: >
        Gets an array of jet drops given a `pulse_number` as a path parameter.


        Optionally, specify pagination parameters. For more information, refer
        to the [filtering, pagination,
        sorting](#section/Insolar-Explorer-API-documentation/Filtering-pagination-sorting)
        section.
      operationId: JetDropsByPulseNumber
      tags:
        - Jet drop
      parameters:
        - $ref: '#/components/parameters/pulse_number_path'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/from_jet_drop_id'
      responses:
        '200':
          $ref: '#/components/responses/jetDropsResponse'
        '400':
          $ref: '#/components/responses/400Response'
        '500':
          $ref: '#/components/responses/500Response'
  '/api/v1/jets/{jet_id}/jet-drops':
    get:
      summary: Jet drops by jet ID
      description: >
        Gets an array of jet drops given a `jet_id` as a path parameter.


        Optionally, specify filtering, sorting, and pagination parameters. For
        more information, refer to the [filtering, pagination,
        sorting](#section/Insolar-Explorer-API-documentation/Filtering-pagination-sorting)
        section.
      operationId: JetDropsByJetID
      tags:
        - Jet drop
      parameters:
        - $ref: '#/components/parameters/jet_id_path'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort_by_pulse'
        - $ref: '#/components/parameters/pulse_number_gte'
        - $ref: '#/components/parameters/pulse_number_gt'
        - $ref: '#/components/parameters/pulse_number_lte'
        - $ref: '#/components/parameters/pulse_number_lt'
      responses:
        '200':
          $ref: '#/components/responses/jetDropsResponse'
        '400':
          $ref: '#/components/responses/400Response'
        '500':
          $ref: '#/components/responses/500Response'
  '/api/v1/jet-drops/{jet_drop_id}/records':
    get:
      summary: Records
      description: >
        Gets an array of records of a jet drop given a `jet_drop_id` as a path
        parameter.


        Optionally, specify filtering and pagination parameters. For more
        information, refer to the [filtering, pagination,
        sorting](#section/Insolar-Explorer-API-documentation/Filtering-pagination-sorting)
        section.
      operationId: jet_drop_records
      tags:
        - Record
      parameters:
        - $ref: '#/components/parameters/jet_drop_id_path'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/from_index'
        - $ref: '#/components/parameters/recordTypeParam'
      responses:
        '200':
          $ref: '#/components/responses/recordsResponse'
        '400':
          $ref: '#/components/responses/400Response'
        '500':
          $ref: '#/components/responses/500Response'
  '/api/v1/lifeline/{object_reference}/states':
    get:
      summary: Object lifeline
      description: >
        Gets an array of states of a lifeline given an `object_reference` as a
        path parameter.


        Optionally, specify filtering, sorting, and pagination parameters. For
        more information, refer to the [filtering, pagination,
        sorting](#section/Insolar-Explorer-API-documentation/Filtering-pagination-sorting)
        section.
      operationId: object_lifeline
      tags:
        - Record
      parameters:
        - $ref: '#/components/parameters/object_reference_path'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/from_index'
        - $ref: '#/components/parameters/sort_by_index'
        - $ref: '#/components/parameters/pulse_number_gt'
        - $ref: '#/components/parameters/pulse_number_lt'
        - $ref: '#/components/parameters/timestamp_gte'
        - $ref: '#/components/parameters/timestamp_lte'
      responses:
        '200':
          $ref: '#/components/responses/statesResponse'
        '400':
          $ref: '#/components/responses/400Response'
        '500':
          $ref: '#/components/responses/500Response'
  '/api/v1/requests/{request_reference}/original-request':
    get:
      summary: Original request
      description: >-
        Gets the original request that caused the given request. Takes
        `request_reference` as a path parameter.
      operationId: originalrequest
      tags:
        - 'Request, result, and state'
      parameters:
        - $ref: '#/components/parameters/request_reference_path'
      responses:
        '200':
          $ref: '#/components/responses/OriginalRequestResponse'
        '400':
          $ref: '#/components/responses/400Response'
        '404':
          $ref: '#/components/responses/404Response'
        '500':
          $ref: '#/components/responses/500Response'
  '/api/v1/lifeline/{object_reference}/original-requests':
    get:
      summary: Original request by object
      description: >
        Gets an array of original requests that changed the state of the object.
        Takes `object_reference` as a path parameter.


        Optionally, specify filtering, sorting, and pagination parameters. For
        more information, refer to the [filtering, pagination,
        sorting](#section/Insolar-Explorer-API-documentation/Filtering-pagination-sorting)
        section.
      operationId: original_request_by_object
      tags:
        - 'Request, result, and state'
      parameters:
        - $ref: '#/components/parameters/object_reference_path'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/from_index'
        - $ref: '#/components/parameters/sort_by_index'
        - $ref: '#/components/parameters/pulse_number_gt'
        - $ref: '#/components/parameters/pulse_number_lt'
        - $ref: '#/components/parameters/timestamp_gte'
        - $ref: '#/components/parameters/timestamp_lte'
      responses:
        '200':
          $ref: '#/components/responses/OriginalRequestResponse'
        '400':
          $ref: '#/components/responses/400Response'
        '500':
          $ref: '#/components/responses/500Response'
  '/api/v1/requests/{request_reference}':
    get:
      summary: Request
      description: >-
        Gets details of a request given a `request_reference` as a path
        parameter.
      operationId: request
      tags:
        - 'Request, result, and state'
      parameters:
        - $ref: '#/components/parameters/request_reference_path'
      responses:
        '200':
          $ref: '#/components/responses/OriginalRequestResponse'
        '400':
          $ref: '#/components/responses/400Response'
        '404':
          $ref: '#/components/responses/404Response'
        '500':
          $ref: '#/components/responses/500Response'
  '/api/v1/requests/{request_reference}/call-tree':
    get:
      summary: Request tree
      description: >
        Gets a request tree given a `request_reference` as a path parameter. The
        request tree is chain of requests each of which has a reference to a
        corresponding result and state.
      operationId: requestTree
      tags:
        - 'Request, result, and state'
      parameters:
        - $ref: '#/components/parameters/request_reference_path'
      responses:
        '200':
          $ref: '#/components/responses/requestTreeResponse'
        '400':
          $ref: '#/components/responses/400Response'
        '500':
          $ref: '#/components/responses/500Response'
  '/api/v1/requests/{request_reference}/result':
    get:
      summary: Result
      description: >-
        Gets a corresponding result given a `request_reference` as a path
        parameter.
      operationId: result
      tags:
        - 'Request, result, and state'
      parameters:
        - $ref: '#/components/parameters/request_reference_path'
      responses:
        '200':
          $ref: '#/components/responses/resultResponse'
        '400':
          $ref: '#/components/responses/400Response'
        '404':
          $ref: '#/components/responses/404Response'
        '500':
          $ref: '#/components/responses/500Response'
  '/api/v1/states/{state_reference}':
    get:
      summary: State
      description: Gets a state given `state_reference` as a path parameter.
      operationId: state
      tags:
        - 'Request, result, and state'
      parameters:
        - $ref: '#/components/parameters/state_reference_path'
      responses:
        '200':
          $ref: '#/components/responses/stateResponse'
        '400':
          $ref: '#/components/responses/400Response'
        '404':
          $ref: '#/components/responses/404Response'
        '500':
          $ref: '#/components/responses/500Response'
  /api/v1/search:
    get:
      summary: Search
      description: >
        Searches for an entity by its identifier.


        Entities and their identifiers may be one of the following:

        * Record—record reference

        * State-state by object

        * Jet drop—jet drop ID (combination of `jet_id` and `pulse_number`)

        * Pulse—pulse number

        * Lifeline—object reference

        * Original request—user request that comes from outside the Platform

        * Request—request one object made to another inside the Platform

        * Request tree—all connected requests for the given request. Each
        request in a request tree supplied with references to the corresponding
        state and response.


        Search takes any of the identifiers above as the `value` parameter,
        determines the identifier type and finds the corresponding entity. If
        the entity exists, search returns its type and meta-information.
      operationId: search
      tags:
        - Search
      parameters:
        - name: value
          in: query
          required: true
          schema:
            type: string
          description: Searching value.
      responses:
        '200':
          $ref: '#/components/responses/searchResponse'
        '400':
          $ref: '#/components/responses/400Response'
        '404':
          $ref: '#/components/responses/404Response'
        '500':
          $ref: '#/components/responses/500Response'
components:
  parameters:
    limit:
      in: query
      name: limit
      description: Number of entries to show per page.
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 1000
        default: 20
      example: 25
    offsetParam:
      in: query
      name: offset
      description: Number of entries to skip from the starting point (`from_*`).
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
      example: 10
    fromPulseNumberParam:
      in: query
      name: from_pulse_number
      description: Specific `pulse_number` to paginate from.
      required: false
      schema:
        type: integer
        format: int64
        minimum: 0
      example: 43612021
    timestamp_gte:
      in: query
      name: timestamp_gte
      description: >-
        Starting point for a range—greater than or equal to the specified
        `timestamp` in the Unix format.
      required: false
      schema:
        type: integer
        format: int64
        description: Unix timestamp.
      example: 1451743413
    timestamp_lte:
      in: query
      name: timestamp_lte
      description: >-
        Ending point for a range—less than or equal to the specified `timestamp`
        in the Unix format.
      required: false
      schema:
        type: integer
        format: int64
        description: Unix timestamp.
      example: 1451743413
    pulse_number_gt:
      in: query
      name: pulse_number_gt
      description: >-
        Starting point for a range of pulses—greater than the specified
        `pulse_number`.
      required: false
      schema:
        type: integer
        minimum: 0
      example: 43648104
    pulse_number_gte:
      in: query
      name: pulse_number_gte
      description: >-
        Starting point for a range of pulses—greater than or equal to the
        specified `pulse_number`.
      required: false
      schema:
        type: integer
        minimum: 0
      example: 43648104
    pulse_number_lt:
      in: query
      name: pulse_number_lt
      description: >-
        Ending point for a range of pulses—less than the specified
        `pulse_number`.
      required: false
      schema:
        type: integer
        minimum: 0
      example: 43648106
    pulse_number_lte:
      in: query
      name: pulse_number_lte
      description: >-
        Ending point for a range of pulses—less than or equal to the specified
        `pulse_number`.
      required: false
      schema:
        type: integer
        minimum: 0
      example: 43648106
    sort_by_pulse_number:
      in: query
      name: sort_by
      description: >-
        Sorting direction—ascending or descending relative to the monotonically
        increasing `pulse_number`.
      required: false
      schema:
        type: string
        default: pulse_number_desc
        enum:
          - pulse_number_asc
          - pulse_number_desc
      example: pulse_number_asc
    pulse_number_path:
      in: path
      name: pulse_number
      required: true
      schema:
        type: integer
        format: int64
        minimum: 0
      description: Pulse number.
      example: 43648102
    jet_drop_id_path:
      name: jet_drop_id
      in: path
      required: true
      schema:
        type: string
      description: 'Combination of `jet_id` and `pulse_number` separated by a `:`.'
      example: '0010:43648102'
    from_jet_drop_id:
      in: query
      name: from_jet_drop_id
      description: Specific `jet_drop_id` to paginate from.
      required: false
      schema:
        type: string
      example: '3:43612021'
    jet_id_path:
      in: path
      name: jet_id
      required: true
      schema:
        type: string
      description: Jet ID.
      example: 10
    sort_by_pulse:
      in: query
      name: sort_by
      description: >
        Sorts by the `pulse_number` attribute of the returned object.

        Can take two values that specify the sorting direction: descending
        (`pulse_number_desc`) or ascending (`pulse_number_asc`).
      required: false
      schema:
        type: string
        default: 'pulse_number_desc,jet_id_asc'
        enum:
          - 'pulse_number_asc,jet_id_desc'
          - 'pulse_number_desc,jet_id_asc'
      example: 'pulse_number_asc,jet_id_desc'
    from_index:
      name: from_index
      description: Specific `index` to paginate from.
      in: query
      required: false
      schema:
        type: string
      example: '43612021:323'
    recordTypeParam:
      name: type
      in: query
      description: Record type to filter the obtained records by.
      required: false
      schema:
        type: string
        enum:
          - state
          - request
          - result
      example: state
    object_reference_path:
      name: object_reference
      in: path
      required: true
      schema:
        type: string
      description: Object reference.
      example: 'insolar:1AAEAAS2JLnvh2bkLUUlUijqcp7--k8_GIz9qLKxZXLE'
    sort_by_index:
      in: query
      name: sort_by
      description: >
        Sorts by the `index` attribute of the returned object.

        Can take two values that specify the sorting direction: descending
        (`index_desc`) or ascending (`index_asc`).
      required: false
      schema:
        type: string
        default: index_asc
        enum:
          - index_desc
          - index_asc
      example: index_asc
    request_reference_path:
      name: request_reference
      in: path
      required: true
      schema:
        type: string
      description: Reference to a request or original request.
      example: 'insolar:1AAEAAS2JLnvh2bkLUUlUijqcp7--k8_GIz9qLKxZXLE'
    state_reference_path:
      name: state_reference
      in: path
      required: true
      schema:
        type: string
      description: State reference.
      example: 'insolar:1AAEAAS2JLnvh2bkLUUlUijqcp7--k8_GIz9qLKxZXLE'
  responses:
    pulsesResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/pulses'
    400Response:
      description: |
        Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/code-validation-error'
    500Response:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/code-error'
    pulseResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/pulse'
    404Response:
      description: Not found
    jetDropResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/jet-drop'
    jetDropsResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/jet-drops'
    recordsResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/records'
    statesResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/states'
    OriginalRequestResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/original-requests'
    requestTreeResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/requestTree'
    resultResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/result'
    stateResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/state'
    searchResponse:
      description: OK
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/search-pulse'
              - $ref: '#/components/schemas/search-jet-drop'
              - $ref: '#/components/schemas/search-lifeline'
              - $ref: '#/components/schemas/search-request'
              - $ref: '#/components/schemas/search-original-request'
              - $ref: '#/components/schemas/search-state'
  schemas:
    pulses:
      description: A paginated array of pulses.
      type: object
      properties:
        total:
          type: integer
          format: int64
          description: >-
            Actual number of existing entries. May be higher or lower than the
            specified `limit`.
          example: 100
        result:
          type: array
          description: >-
            Array with a number entries as specified by filtering and pagination
            parameters.
          items:
            $ref: '#/components/schemas/pulse'
    code-validation-error:
      description: Response codes.
      type: object
      properties:
        code:
          type: string
          description: Error code received from the backend services.
        message:
          type: string
          description: Short error description.
        description:
          type: string
          description: Additional information about the error.
        validation_failures:
          description: Array containing incorrect parameters/properties.
          type: array
          items:
            $ref: '#/components/schemas/code-validation-failures'
    code-error:
      description: Response codes.
      type: object
      properties:
        code:
          type: string
          description: Error code received from the backend services.
        message:
          type: string
          description: Short error description.
        description:
          type: string
          description: Additional information about the error.
    pulse:
      description: Pulse representation.
      type: object
      properties:
        pulse_number:
          type: integer
          format: int64
          description: Pulse number.
          example: 43648102
        prev_pulse_number:
          type: integer
          format: int64
          description: Previous pulse number.
          example: 43648092
        next_pulse_number:
          type: integer
          format: int64
          description: Next pulse number.
          example: 43648112
        jet_drop_amount:
          type: integer
          format: int64
          description: Number of all jet drops in the pulse.
          example: 16
        record_amount:
          type: integer
          format: int64
          description: Number of all records in the pulse.
          example: 245
        timestamp:
          type: integer
          format: int64
          description: Unix timestamp.
          example: 1451743413
        is_complete:
          type: boolean
          description: Pulse completion status.
          example: true
    jet-drop:
      description: Jet drop representation.
      type: object
      properties:
        jet_drop_id:
          type: string
          description: 'Combination of `jet_id` and `pulse_number` separated by a `:`.'
          example: '0010:43648102'
          pattern: '^((\*|([0-1]{1,216})):\d+)$'
        next_jet_drop_id:
          type: array
          description: Next `jet_drop_id`.
          items:
            $ref: '#/components/schemas/next-prev-jet-drop'
        prev_jet_drop_id:
          type: array
          description: Previous `jet_drop_id`.
          items:
            $ref: '#/components/schemas/next-prev-jet-drop'
        jet_id:
          type: string
          description: Jet ID.
          example: '0010'
          pattern: '^(\*|([0-1]{1,216}))$'
        pulse_number:
          type: integer
          format: int64
          description: Pulse number.
          example: 43612021
        record_amount:
          type: integer
          format: int64
          description: Number of all records in the pulse.
          example: 245
        timestamp:
          type: integer
          format: int64
          description: Unix timestamp.
          example: 1451743413
        hash:
          type: string
          description: Record hash.
          example: >-
            0JfQtNC10YHRjCDQvNC+0LPQu9CwINCx0YvRgtGMINCy0LDRiNCwINGA0LXQutC70LDQvNCw
    jet-drops:
      description: A paginated array of jet drops.
      type: object
      properties:
        total:
          type: integer
          format: int64
          description: >-
            Actual number of existing entries. May be higher or lower than the
            specified `limit`.
          example: 100
        result:
          type: array
          description: >-
            Array with a number entries as specified by filtering and pagination
            parameters.
          items:
            $ref: '#/components/schemas/jet-drop'
    records:
      description: A paginated array of records.
      type: object
      properties:
        total:
          type: integer
          format: int64
          description: >-
            Actual number of existing entries. May be higher or lower than the
            specified `limit`.
          example: 100
        result:
          type: array
          description: >-
            Array with a number entries as specified by filtering and pagination
            parameters.
          items:
            $ref: '#/components/schemas/record'
    states:
      description: A paginated array of records.
      type: object
      properties:
        total:
          type: integer
          format: int64
          description: >-
            Actual number of existing entries. May be higher or lower than the
            specified `limit`.
          example: 100
        result:
          type: array
          description: >-
            Array with a number entries as specified by filtering and pagination
            parameters.
          items:
            $ref: '#/components/schemas/state'
    original-requests:
      description: A paginated array of original requests.
      type: object
      properties:
        total:
          type: integer
          format: int64
          description: >-
            Actual number of existing entries. May be higher or lower than the
            specified `limit`.
          example: 100
        result:
          type: array
          description: >-
            Array with a number entries as specified by filtering and pagination
            parameters.
          items:
            $ref: '#/components/schemas/request'
    requestTree:
      description: A paginated array of connected requests.
      type: object
      properties:
        result:
          type: array
          description: >-
            An array containing request details and references to the
            corresponding result and state.
          items:
            $ref: '#/components/schemas/childTree'
    result:
      description: Result representation.
      allOf:
        - $ref: '#/components/schemas/record-abstract'
        - type: object
          properties:
            reference:
              type: string
              description: Result reference.
              example: 'insolar:1Apn2LmIL4ehiZ5NN0fLo5qJR7CeodnLDUtmvI9TrWVw.record'
              pattern: '^insolar:1[a-zA-Z0-9_-]{42,43}\.record$'
            request_reference:
              type: string
              description: Reference to the corresponding request.
              example: 'insolar:1Apn2LmIL4ehiZ5NN0fLo5qJR7CeodnLDUtmvI9TrWVw.record'
              pattern: '^insolar:1[a-zA-Z0-9_-]{42,43}\.record$'
            payload:
              type: string
              description: Result payload.
              example: >-
                0KLQvtC/INC60L7QvdGC0LXQvdGCLCDQu9GD0YfRiNCw0Y8g0L/Qu9Cw0YLRhNC+0YDQvNCw
    state:
      description: State representation.
      type: object
      properties:
        reference:
          type: string
          description: State reference.
          example: 'insolar:1Apn2LmIL4ehiZ5NN0fLo5qJR7CeodnLDUtmvI9TrWVw.record'
          pattern: '^insolar:1[a-zA-Z0-9_-]{42,43}\.record$'
        type:
          type: string
          description: State type.
          enum:
            - activate
            - amend
            - deactivate
          example: activate
        request_reference:
          type: string
          description: Reference to the corresponding request.
          example: 'insolar:1Apn2LmIL4ehiZ5NN0fLo5qJR7CeodnLDUtmvI9TrWVw.record'
          pattern: '^insolar:1[a-zA-Z0-9_-]{42,43}\.record$'
        parent_reference:
          type: string
          description: >-
            Reference to the parent object that caused creation of the given
            object. For example, a member object is a parent of its deposit
            account object.
          example: 'insolar:1Apn2LmIL4ehiZ5NN0fLo5qJR7CeodnLDUtmvI9TrWVw.record'
          pattern: '^insolar:1[a-zA-Z0-9_-]{42,43}\.record$'
        prototype_reference:
          type: string
          description: >-
            Prototype reference. Borrowing the OOP terminology, a prototype is a
            class of an object.
          example: 'insolar:1Ajx0cKvLPzFwV-vW4jp-wuuwUcDv1lgvQFrIAvQYH3g'
          pattern: '^insolar:(0[a-zA-Z0-9_-]{2,43}|1[a-zA-Z0-9_-]{42,43})$'
        payload:
          type: string
          description: Record payload.
          example: >-
            0KLQvtC/INC60L7QvdGC0LXQvdGCLCDQu9GD0YfRiNCw0Y8g0L/Qu9Cw0YLRhNC+0YDQvNCw
        object_reference:
          type: string
          description: Object reference.
          example: 'insolar:1AAEAAS2JLnvh2bkLUUlUijqcp7--k8_GIz9qLKxZXLE'
          pattern: '^insolar:(0[a-zA-Z0-9_-]{2,43}|1[a-zA-Z0-9_-]{42,43})$'
        prev_state_reference:
          type: string
          description: Reference to a previous record.
          example: 'insolar:1Apn2LmIL4ehiZ5NN0fLo5qJR7CeodnLDUtmvI9TrWVy.record'
          pattern: '^insolar:1[a-zA-Z0-9_-]{42,43}\.record$'
        hash:
          type: string
          description: Record hash.
          example: >-
            0JfQtNC10YHRjCDQvNC+0LPQu9CwINCx0YvRgtGMINCy0LDRiNCwINGA0LXQutC70LDQvNCw
        jet_id:
          type: string
          description: Jet ID.
          example: '0010'
          pattern: '^([0-1]{2,64})$'
        jet_drop_id:
          type: string
          description: 'Combination of `jet_id` and `pulse_number` separated by a `:`.'
          example: '0010:43648102'
        pulse_number:
          type: integer
          format: int64
          description: Pulse number.
          example: 436120213
        order:
          type: integer
          format: int64
          description: Record number in a `jet drop`.
          example: '3'
        timestamp:
          type: integer
          format: int64
          description: Unix timestamp.
          example: 1451743413
    search-pulse:
      description: Pulse response.
      title: Pulse response
      type: object
      properties:
        type:
          type: string
          description: Result type.
          enum:
            - pulse
          example: pulse
        meta:
          type: object
          description: Meta data.
          properties:
            pulse_number:
              type: integer
              format: int64
              description: Pulse number.
              example: 1
    search-jet-drop:
      description: Jet drop response.
      title: Jet drop response
      type: object
      properties:
        type:
          type: string
          description: Result type.
          enum:
            - jet-drop
          example: jet-drop
        meta:
          type: object
          description: Meta data.
          properties:
            jet_drop_id:
              type: string
              description: 'Combination of `jet_id` and `pulse_number` separated by a `:`.'
              example: '001:43612021'
    search-lifeline:
      description: Lifeline response.
      title: Lifeline response
      type: object
      properties:
        type:
          type: string
          description: Result type.
          enum:
            - lifeline
          example: lifeline
        meta:
          type: object
          description: Meta data.
          properties:
            object_reference:
              type: string
              description: Object reference.
              example: 'insolar:1AAEAAS2JLnvh2bkLUUlUijqcp7--k8_GIz9qLKxZXLE'
    search-request:
      description: Request response.
      title: Request response
      type: object
      properties:
        type:
          type: string
          description: Result type.
          enum:
            - request
          example: request
        meta:
          type: object
          description: Meta data.
          properties:
            object_reference:
              type: string
              description: Object reference.
              example: 'insolar:1AAEAAS2JLnvh2bkLUUlUijqcp7--k8_GIz9qLKxZXLE'
              pattern: '^insolar:(0[a-zA-Z0-9_-]{2,43}|1[a-zA-Z0-9_-]{42,43})$'
    search-original-request:
      description: Original request response.
      title: Original request response
      type: object
      properties:
        type:
          type: string
          description: Result type.
          enum:
            - original-request
          example: original-request
        meta:
          type: object
          description: Meta data.
          properties:
            object_reference:
              type: string
              description: Object reference.
              example: 'insolar:1AAEAAS2JLnvh2bkLUUlUijqcp7--k8_GIz9qLKxZXLE'
              pattern: '^insolar:(0[a-zA-Z0-9_-]{2,43}|1[a-zA-Z0-9_-]{42,43})$'
    search-state:
      description: State response.
      title: State response
      type: object
      properties:
        type:
          type: string
          description: Result type.
          enum:
            - state
          example: state
        meta:
          type: object
          description: Meta data.
          properties:
            object_reference:
              type: string
              description: Reference to the corresponding object.
              example: 'insolar:1AAEAAS2JLnvh2bkLUUlUijqcp7--k8_GIz9qLKxZXLE'
              pattern: '^insolar:(0[a-zA-Z0-9_-]{2,43}|1[a-zA-Z0-9_-]{42,43})$'
            index:
              type: string
              description: >-
                Combination of `pulse_number` and `order` separated by a `:`.
                Order is a record number in a jet drop.
              example: '43648102:7'
    code-validation-failures:
      description: Validation failure.
      type: object
      properties:
        property:
          type: string
          description: Property name.
        failure_reason:
          type: string
          description: Failure reason.
    next-prev-jet-drop:
      description: Jet Drop representation.
      type: object
      properties:
        jet_drop_id:
          type: string
          description: 'Combination of `jet_id` and `pulse_number` separated by a `:`.'
          example: '0010:43648102'
          pattern: '^((\*|([0-1]{1,216})):\d+)$'
        jet_id:
          type: string
          description: Jet ID.
          example: '0010'
          pattern: '^(\*|([0-1]{1,216}))$'
        pulse_number:
          type: integer
          format: int64
          description: Pulse number.
          example: 43612021
    record:
      description: Record representation.
      allOf:
        - $ref: '#/components/schemas/record-abstract'
        - type: object
          properties:
            reference:
              type: string
              description: Record reference.
              example: 'insolar:1Apn2LmIL4ehiZ5NN0fLo5qJR7CeodnLDUtmvI9TrWVw.record'
              pattern: '^insolar:1[a-zA-Z0-9_-]{42,43}\.record$'
            prev_record_reference:
              type: string
              description: Reference to a previous record.
              example: 'insolar:1Apn2LmIL4ehiZ5NN0fLo5qJR7CeodnLDUtmvI9TrWVy.record'
              pattern: '^insolar:1[a-zA-Z0-9_-]{42,43}\.record$'
            prototype_reference:
              type: string
              description: >-
                Prototype reference. Borrowing the OOP terminology, a prototype
                is a class of an object.
              example: 'insolar:1Ajx0cKvLPzFwV-vW4jp-wuuwUcDv1lgvQFrIAvQYH3g'
              pattern: '^insolar:(0[a-zA-Z0-9_-]{2,43}|1[a-zA-Z0-9_-]{42,43})$'
            type:
              type: string
              description: Record type.
              enum:
                - state
                - request
                - result
              example: state
            payload:
              type: string
              description: Record payload.
              example: >-
                0KLQvtC/INC60L7QvdGC0LXQvdGCLCDQu9GD0YfRiNCw0Y8g0L/Qu9Cw0YLRhNC+0YDQvNCw
            jet_drop_id:
              type: string
              description: 'Combination of `jet_id` and `pulse_number` separated by a `:`.'
              example: '0010:43648102'
            index:
              type: string
              description: >-
                Combination of `pulse_number` and `order` separated by a `:`.
                Order is a record number in a jet drop.
              example: '43648102:7'
    request:
      description: Request representation.
      allOf:
        - $ref: '#/components/schemas/record-abstract'
        - type: object
          properties:
            reference:
              type: string
              description: Request reference.
              example: 'insolar:1Apn2LmIL4ehiZ5NN0fLo5qJR7CeodnLDUtmvI9TrWVw.record'
              pattern: '^insolar:1[a-zA-Z0-9_-]{42,43}\.record$'
            caller_reference:
              type: string
              description: Reference to the object that called this request.
              example: 'insolar:1Apn2LmIL4ehiZ5NN0fLo5qJR7CeodnLDUtmvI9TrWVy.record'
              pattern: '^insolar:1[a-zA-Z0-9_-]{42,43}\.record$'
            trace_id:
              type: string
              description: Internal debugging information. May be an empty string.
              example: 0b9ac245-2522-4364-9059-efc17907ce54
            reason_reference:
              type: string
              description: Reference to the parent request—a request that caused this one.
              example: 'insolar:1AAEAAS2JLnvh2bkLUUlUijqcp7--k8_GIz9qLKxZXLE'
              pattern: '^insolar:(0[a-zA-Z0-9_-]{2,43}|1[a-zA-Z0-9_-]{42,43})$'
            method:
              type: string
              description: Name of the smart contract method that called this request.
              example: createMember
            is_original_request:
              type: boolean
              description: True if request is original. False otherwise.
              example: true
            arguments:
              type: string
              description: Arguments of a smart contract method.
              example: >-
                0KLQvtC/INC60L7QvdGC0LXQvdGCLCDQu9GD0YfRiNCw0Y8g0L/Qu9Cw0YLRhNC+0YDQvNCw
            is_immutable:
              type: boolean
              description: True if request didn't change the object state. False otherwise.
              example: true
            prototype_reference:
              type: string
              description: >-
                Prototype reference. Borrowing the OOP terminology, a prototype
                is a class of an object.
              example: 'insolar:1Ajx0cKvLPzFwV-vW4jp-wuuwUcDv1lgvQFrIAvQYH3g'
              pattern: '^insolar:(0[a-zA-Z0-9_-]{2,43}|1[a-zA-Z0-9_-]{42,43})$'
            index:
              type: string
              description: >-
                Combination of `pulse_number` and `order` separated by a `:`.
                Order is a record number in a jet drop.
              example: '43648102:7'
    childTree:
      description: Request details and references to the corresdponing resut and state.
      allOf:
        - $ref: '#/components/schemas/record-abstract'
        - type: object
          properties:
            root:
              type: boolean
              description: Root of the request tree—an original request.
              example: true
            state_reference:
              type: string
              description: >-
                Reference to the new state that was created by the execution of
                this request.
              example: 'insolar:1Apn2LmIL4ehiZ5NN0fLo5qJR7CeodnLDUtmvI9TrWVw.record'
              pattern: '^insolar:1[a-zA-Z0-9_-]{42,43}\.record$'
            execution_state_reference:
              type: string
              description: >-
                Reference to an existing state that was called during the
                execution of this request.
              example: 'insolar:1Apn2LmIL4ehiZ5NN0fLo5qJR7CeodnLDUtmvI9TrWVw.record'
              pattern: '^insolar:1[a-zA-Z0-9_-]{42,43}\.record$'
            reference:
              type: string
              description: Request reference.
              example: 'insolar:1Apn2LmIL4ehiZ5NN0fLo5qJR7CeodnLDUtmvI9TrWVw.record'
              pattern: '^insolar:1[a-zA-Z0-9_-]{42,43}\.record$'
            result_reference:
              type: string
              description: >-
                Reference to the result that was created by the execution of
                this request.
              example: 'insolar:1Apn2LmIL4ehiZ5NN0fLo5qJR7CeodnLDUtmvI9TrWVw.record'
              pattern: '^insolar:1[a-zA-Z0-9_-]{42,43}\.record$'
            is_immutable:
              type: boolean
              description: True if request didn't change the object state. False otherwise.
              example: true
            next_requests:
              type: array
              description: An array of references to subsequent requests in the tree.
              items:
                type: string
                description: Request reference.
                example: 'insolar:1AAEAAS2JLnvh2bkLUUlUijqcp7--k8_GIz9qLKxZXLE.record'
                pattern: '^insolar:1[a-zA-Z0-9_-]{42,43}\.record$'
            caller_reference:
              type: string
              description: Reference to the object that called this request.
              example: 'insolar:1Apn2LmIL4ehiZ5NN0fLo5qJR7CeodnLDUtmvI9TrWVy.record'
              pattern: '^insolar:1[a-zA-Z0-9_-]{42,43}\.record$'
            trace_id:
              type: string
              description: Internal debugging information. May be an empty string.
              example: 0b9ac245-2522-4364-9059-efc17907ce54
            is_original_request:
              type: boolean
              description: True if request is original. False otherwise.
              example: true
            reason_reference:
              type: string
              description: Reference to the parent request—a request that caused this one.
              example: 'insolar:1AAEAAS2JLnvh2bkLUUlUijqcp7--k8_GIz9qLKxZXLE'
              pattern: '^insolar:(0[a-zA-Z0-9_-]{2,43}|1[a-zA-Z0-9_-]{42,43})$'
            method:
              type: string
              description: Name of the smart contract method that called this request.
              example: createMember
            arguments:
              type: string
              description: Arguments of a smart contract method.
              example: ''
            prototype_reference:
              type: string
              description: >-
                Prototype reference. Borrowing the OOP terminology, a prototype
                is a class of an object.
              example: 'insolar:1Ajx0cKvLPzFwV-vW4jp-wuuwUcDv1lgvQFrIAvQYH3g'
              pattern: '^insolar:(0[a-zA-Z0-9_-]{2,43}|1[a-zA-Z0-9_-]{42,43})$'
    record-abstract:
      description: Record abstract.
      type: object
      properties:
        object_reference:
          type: string
          description: Reference to the corresponding object.
          example: 'insolar:1AAEAAS2JLnvh2bkLUUlUijqcp7--k8_GIz9qLKxZXLE'
          pattern: '^insolar:(0[a-zA-Z0-9_-]{2,43}|1[a-zA-Z0-9_-]{42,43})$'
        hash:
          type: string
          description: Record hash.
          example: >-
            0JfQtNC10YHRjCDQvNC+0LPQu9CwINCx0YvRgtGMINCy0LDRiNCwINGA0LXQutC70LDQvNCw
        jet_id:
          type: string
          description: Jet ID.
          example: '0010'
          pattern: '^([0-1]{2,64})$'
        pulse_number:
          type: integer
          format: int64
          description: Pulse number.
          example: 436120213
        order:
          type: integer
          format: int64
          description: Record number in a `jet drop`.
        timestamp:
          type: integer
          format: int64
          description: Unix timestamp.
