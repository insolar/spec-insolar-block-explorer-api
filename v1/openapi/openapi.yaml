openapi: "3.0.0"
info:
  version: 1.0.0
  title: Insolar Explorer API
  contact:
    name: Insolar dev team
    url: https://insolar.io/team.html
    email: dev-support@insolar.io
  # x-logo:
  #   url: https://insolar.io/logo.svg
  #   altText: Insolar
  #   href: https://insolar.io
  description: |
    # Insolar Explorer API documentation

    Welcome to Insolar documentation for a REST-like API provided by Insolar Explorer.

    [Insolar Explorer](https://github.com/insolar/block-explorer) is a service for searching for and viewing the contents of records, lifelines, jet drops, and jets.

    Insolar Explorer provides an API that allows to search for said entities as well as request, filter, sort, and paginate their arrays.

    ## Entities description

    Basic Insolar entities that you can find in this specification are the following:

    * Record—minimum unit of storage that contains an associated request, response, and service information.
      Records can be of three types:
      * Request. Most requests are caused by other requests inside the Plaftorm with the exception of original requests. The latter are invoked by users.
      * Result. Each request has a corresponding execution result.
      * State. Some execution results change object state. They are caused by so-called mutable requests, while immutable requests are simple read operations.
    * Lifeline—sequence of records. A record in a lifeline is an object state and an object is a smart contract instance.
    * Jet drop—unit of storage for jets.
    * Jet—group of lifelines.

    Some of the entities have complex identifiers. For example:

    * A jet drop ID is a combination of jet ID and pulse number.
    * A record's index is a combination of pulse number and order.
    * An order is a record number in a jet drop.

    ## Filtering, pagination, sorting

    Some requests have filtering, sorting, and pagination capabilities.

    ### Filtering

    Filtering can be of two types:
    * By an attribute value: filters out from the returned array all the entities with attribute values other than specified.

      For example: if you specify `type=request` in a [request](#operation/jet_drop_records) that returns an array of records of different types, the array doesn't contain the `result` and `state` records.

    * By a range of attribute values: filters out from the returned array entities with attribute values that are out of the specified range.

      You can specify inclusive, non-inclusive, open-ended, or closed-ended ranges depending on the request.

      All range filter parameters have one of the following suffixes:
      * `*_gt`—greater than
      * `*_lt`—less than
      * `*_gte`—greater than or equal to
      * `*_lte`—less than or equal to

      For example: if you specify `timestamp_gte=1597409219` and `timestamp_lte=1597409241` in a [request](#operation/pulses) that returns an array of pulses, the array doesn't contain pulses older than `51063280` and younger than `51063340`.

    ### Sorting

    The returned array is sorted by an attribute with a monotonically increasing value (`pulse_number`, `index`), by default in the descending order. Sorting is applied after filtering, if any.

    For example: if you specify `sort_by=index_asc` in a [request](#operation/object_lifeline) that returns an array of records, the array is sorted in the ascending order of `index`.

    ### Pagination

    Pagination can be applied after filtering and sorting, and uses the following 3 parameters:

    * `limit`—number of array items to return.
    * `offset`—number of items to skip.
    * `from_*`—pagination starting point: the value of a monotonically increasing attribute. The `*` designates the property name to paginate by.

    For example: if you specify `?limit=100&offset=5&from_index=47382564:2` in a [request](#operation/jet_drop_records) that returns an array of records, the array:

    * Starts with a record with the 5th index relative to the index `47382564:2`.
    * Can consist of 100 entries maximum.

    The number of entries may vary depending on the actual number of records requested.
    To show if the value of the `limit` parameter is higher or lower than the actual number of entries, each response to a paginated request contains the actual existing number in the `total` property.

servers:
  - url: example.com
    description: Test server.

tags:
  - name: Pulse
    description: Pulse is the trigger for the production of a new jet drop. Pulse also serves as the default time unit on Insolar Network.
  - name: Jet drop
    description: Jet drop is the unit of storage for jets. Jet drop contains all records that are registered within a pulse and associated with a particular jet.
  - name: Record
    description: Record is the minimum unit of storage that contains an associated request, response, and service information. Records are grouped by lifeline.
  - name: Request, result, and state
    description: |
      Requests and corresponding results and states.

      Request can either be an original request a user made via the API or a subsequent request one object made to another.
      Except the original, requests have a reason, which is a reference to the previous one.
      The reason of original request is not pointer but a reference that is formed from the pulse data and the request's parameters.

      Execution of all requests causes a corresponding result. Execution of a mutable request also causes a new state.
      Each result contains a reference to the corresponding request.
  - name: Search
    description: Searches for an entity on the blockchain.

paths:
  /api/v1/pulses:
    $ref: 'requests/pulses.yaml'
  /api/v1/pulses/{pulse_number}:
    $ref: 'requests/pulse.yaml'
  /api/v1/jet-drops/{jet_drop_id}:
    $ref: 'requests/jet-drop-byid.yaml'
  /api/v1/pulses/{pulse_number}/jet-drops:
    $ref: 'requests/jet-drops-bypulse.yaml'
  /api/v1/jets/{jet_id}/jet-drops:
    $ref: 'requests/jet-drops-byjetid.yaml'
  /api/v1/jet-drops/{jet_drop_id}/records:
    $ref: 'requests/records.yaml'
  /api/v1/lifeline/{object_reference}/states:
    $ref: 'requests/lifeline.yaml'
  /api/v1/requests/{request_reference}/original-request:
    $ref: 'requests/original-request-by-request.yaml'
  /api/v1/lifeline/{object_reference}/original-requests:
    $ref: 'requests/original-requests-by-obj.yaml'
  /api/v1/requests/{request_reference}:
    $ref: 'requests/request.yaml'
  /api/v1/requests/{request_reference}/call-tree:
    $ref: 'requests/request-tree.yaml'
  /api/v1/requests/{request_reference}/result:
    $ref: 'requests/result.yaml'
  /api/v1/states/{state_reference}:
    $ref: 'requests/state.yaml'
  /api/v1/search:
    $ref: 'requests/search.yaml'

